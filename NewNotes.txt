1.5 Debugging
6.1.2 Signed build 
1.3 Animation 
4. Best Practices
4.1 Performance 
4.2 Best practices for coding 
4.3 Improving user experience.
4.2 Axios
 
Singed build:

Steps:

Steps
1.Generate an upload key:

keytool -genkeypair -v -storetype PKCS12 -keystore my-upload-key.keystore -alias my-key-alias -keyalg RSA -keysize 2048 -validity 10000

2.Place the keyfiles under the android/app directory.

3.edit /.gradle/gradle.properties
  android/gradle.properties


MYAPP_UPLOAD_STORE_FILE=my-upload-key.keystore
MYAPP_UPLOAD_KEY_ALIAS=my-key-alias
MYAPP_UPLOAD_STORE_PASSWORD=123456
MYAPP_UPLOAD_KEY_PASSWORD=123456

4.Adding signing config to your app's gradle config.

android/app/build.gradle

signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
         release {
            if (project.hasProperty('MYAPP_UPLOAD_STORE_FILE')) {
                storeFile file(MYAPP_UPLOAD_STORE_FILE)
                storePassword MYAPP_UPLOAD_STORE_PASSWORD
                keyAlias MYAPP_UPLOAD_KEY_ALIAS
                keyPassword MYAPP_UPLOAD_KEY_PASSWORD
            }
        }
    }

5.Release the build

npx react-native build-android --mode=release

This release the android app bundle - AAB

E:\session\ideyalabs\reactnative\AwesomeNativeProject\android\app\build\outputs\bundle\release

Animation:
..........

Animation is going to better user expereince.

React native provides two complementary animation systems.

1.Animated
    For grangular and interactive control of seecific values

2.LayoutAnimation
      For global layout transactions.

Animated Api
 

Animated.decay() starts with an initial velocity and gradually slows to a stop.
Animated.spring() provides a basic spring physics model.
Animated.timing() animates a value over time using easing functions.

import React, { useRef, useEffect, useState } from 'react';
import { Animated, Button, Text, View, TouchableOpacity } from 'react-native';

export default function App() {
    const value = useState(new Animated.ValueXY({ x: 0, y: 0 }))[0]

    const onMove = () => {
        Animated.timing(value, {
            toValue: { x: 100, y: 100 },
            duration: 1000,
            useNativeDriver: false
        }).start()
    }

    return <Animated.View style={value.getLayout()}>
        <View style={{ height: 100, width: 100, borderRadius: 100 / 2, backgroundColor: 'red' }}>
        </View>
        <TouchableOpacity style={{ height: 100, width: 100, marginTop: 10 }}>
            <Button
                onPress={onMove}
                title="Move"
                color="#AA3D11"
            />
        </TouchableOpacity>
    </Animated.View>
}
....................................................................................
Common Performance issues:
.........................

1.if your app is running dev mode, javascript thread suffers lot.
(dev=true)

2.console.log issues
 Console.log gives more performance penality when app is running in bundled mode.
 if you are using redux and redux-logger also gives performanc issues.

During dev cycle we might have used console.log very often various place.

How to remove console.log?
  You dont need to remove console.log manually.
you can install the lib called 

 npm i bable-plugin-transform-remove-console --save-dev and edit

.babelrc file file under project root dirctory

{
 "env": {
    "production": {
        "plugins":["transform-remove-console"]
     }
  }

3.Dont use ListView and use always FlatList or sectionList
 }

Speeding up your build phase:

Generally building project is higlhy expensive when project grows bigger and bigger.

 =>Build only one ABI during dev

>npm react-native run-android --active-arch-only

Use compiler cache:

if you are using native builds eith c++ or Objective-c or java/kotiln

....................................................................................

Best Practice for coding:

Userinterface -Platform user interface

Services - Platform services

Biz logic - React, redux

Improving user experience:

=>Ux pratice 
  ->Should show proper color pattern
  ->Accessability patterns
  ->Proper data handlers - loaders


....................................................................................
Axios:
import { StyleSheet, Text, View, Button, Alert, StatusBar, ActivityIndicator, FlatList } from 'react-native'
import { useEffect, useState } from 'react'
import axios from 'axios'

const Todos = props => {
    const [todos, setTodos] = useState({
        error: null,
        isLoaded: false,  //spinners or progress bar 
        items: [] //todo data 
    })
    useEffect(() => {
        //api logic
        const url = `https://jsonplaceholder.typicode.com/todos`;
        // fetch(url)
        //     .then(response => {
        //         //extract data 
        //         return response.json()
        //     })
        //     .then(todos => {
        //         console.log(todos)
        //         setTodos({
        //             items: todos,
        //             isLoaded: true
        //         })
        //     })
        //     .catch(err => {
        //         setTodos({
        //             isLoaded: true,
        //             error: err
        //         })
        //     })
        axios.get(url).then(res => {
            const todos = res.data
            setTodos({
                items: todos,
                isLoaded: true
            })
        }).catch(err => {
            setTodos({
                isLoaded: true,
                error: err
            })
        })

    }, [])

    const { error, isLoaded, items } = todos;
    // conditional rendering:
    if (error) {
        return <View>
            <Text>Error: {error.message}</Text>
        </View>
    }
    else if (!isLoaded) {
        //show spinner
        return <View style={{
            alignItems: 'center', justifyContent: 'center'
        }}>
            <ActivityIndicator size="large" color="#000ff" />
        </View >
    } else {
        //show data
        return <FlatList
            keyExtractor={(todo) => {
                return todo.id
            }}
            data={items}
            renderItem={({ item }) => {
                const { title } = item
                return <View style={styles.item} >
                    <Text style={styles.text}>{title}</Text>
                </View>
            }

            }
        />
    }
}
//page style :Common style 
const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: 'white',
        marginTop: StatusBar.currentHeight || 0
    },
    item: {
        backgroundColor: '#f9c2ff',
        padding: 20,
        marginVertical: 8,
        marginHorizontal: 8
    },
    title: {
        fontSize: 32
    }
})

export default function App() {
    return <>
         <Todos/>
    </>
}
...................................................................................

How to debug React Native code?
https://reactnative.dev/docs/debugging#chrome-developer-tools













