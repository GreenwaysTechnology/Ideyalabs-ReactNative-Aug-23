				  ES 6 Fundamentals
.....................................................................................

What is ES 6? ECMA 6?
 
ES means ECMA Script, ECMA is standard organization to standarize the java script.

What is Java script?
 Javascript is one of the most popular programming language.
 Javascript is Object based, functional style programming language.

Java script language standarized by the Committe "ECMA" - European computer manfacturing assocation.

....................................................................................
 			 ES 6 fundamentals
....................................................................................

What is Java script?
 Javascript is one of the most popular programming language.
 Javascript is Object based, functional style programming language.

Java script language standarized by the Committe "ECMA" - European computer manfacturing assocation.

In 1995, javascript language created by Brendan Eich  at Netscap Communication.

Once the language created by Brendan Eich,The language submitted to the committe called ECMA For standarization.

According to ECMA
1.ES 1.0  -97
2.ES 3.0 -99
3.ES 4.0 -2006
4.ES 5.0 -2007
   During this period, Node.js was created.
5.ES 6/ECMA 2015 - 2012-2015
6.ES 7-2017
etc...

ES 6 Features:
.............
1.language fundamentals
2.functions
3.object based concepts and implementations
....
Modularity
 -Commonjs
 -ES 6 Modularity.
...................................................................................

Project setup:
E:\session\IBM\2023\March>mkdir es6apps

E:\session\IBM\2023\March>cd es6apps

E:\session\IBM\2023\March\es6apps>mkdir src

E:\session\IBM\2023\March\es6apps>code .

How to  run js code?
  
 in order to run js , we need js run time called js virtual machine.

There are two types of javascript Engine.

1.embeded js engine/runtime
    The js engine is embeded into other softwares 
eg: browsers
Chrome - v8
fireFox -  Spider Monkey
Chakra - Edge
etc..

2.stand alone js engine
 
Node.js = V8
Hermes - Open source Engine,Built for React Native

Language fundamentals:

JS is dynamic typed language, the data type is not declared,type of variable is understood during runtime.

variables are declared using "var,let,const,this" keywords

es 6 variables are declared using "let and const"


let | const variableName = value(literal)


types of literals

1.string
2.number
3.boolean
4.undefined
5.NaN
6.infinity
7.function
8.null
9.object

types ;

1.string
2.number - number,infinity,NaN
3.boolean
4.undefined
5.function
6.object - null, object

strings 

1. declared using  "" ,'',``(es6)
2. 16 bit unicode character

`` - back tick notation:

-string interpolation
-multi line string literal


strings 

1. declared using  "" ,'',``(es6)
2. 16 bit unicode character

`` - back tick notation:

-string interpolation
-multi line string literal

//strings 
//"",'',``(backtick -template literals) 
//var firstName = 'Subramaian'
let firstName = 'Subramanian'
let lastName = "Murugan"
console.log("Name " + firstName + lastName)
console.log("Name ", firstName, lastName)
//es 6 feature
console.log(`Name ${firstName} ${lastName}`)
//es 6 back tic notation is used for string concatation.
let title = 'IBM'
let doc = "<html>" +
    "<head>" +
    "<title>" + title + "</title>" +
    "</head>" +
    "<body>" +
    "<h1>Hello</h1>" +
    "</body>";
console.log(doc)

let docOne = `<html>
           <head>
            <title>${title}</title>
            </head>
          <body>
            <h1>Hello</h1>
          </body>
        `;
console.log(docOne)



2.Numbers

-all numbers size is 64 bit aka double.

let salary = 10000;
console.log(`Salary ${salary}`);
let totalSalary = salary * 100
console.log(`Total salary ${salary}`);


2.boolean

- 1 bit value eiether 0 or 1;
- offers built in literal value called true/false


let isEnabled = true
let isValid = false
console.log(`IsEnabled ${isEnabled} IsValid ${isValid}`)

3.undefined:
 -undefined; if variable declared but not initalized with any valid literals

let cost;
console.log(`cost ${cost}`);
//undefined 

let price;  //no value
console.log(`Price ${price}`)

4.NaN -  Not a Number

 -NaN - not a number; it is numerical error code.during numerical computation, 

js engine
 -may throw error - NaN ; 
 -NaN is not valid value, it is error , need to be fixed if you get.

when you will get NaN.
1.if you do compuation against undefined variables.

//numerical computation against undefined
let qty; //undefined
let price = 100;
let totalPrice = qty * price;
console.log(`Totatl Price is ${totalPrice}`)


Infinity:
.........

-div/0 -

let x =100;
let y =0
let c = x/y;
console.log(`C ${c}`)


let vs const:

//let and const both are same
//consts are like final keyword

let a = 10
console.log(`A is ${a}`)
a = 20
console.log(`A is ${a}`)

const b=90
console.log(`B is ${b}`)
b=80
console.log(`B is ${b}`)

....................................................................................
				Advanced Booleans
.....................................................................................

In javascript every thing is true,except the following values

Falsy Values:
.............
1.boolean false
2.0
3.undefined
4.NaN
5.empty string("",'')
6.null

Truthy values are except the above values are considered truthy values....
let myvar //undefined

if (myvar) {
    console.log(`${myvar} is valid`)
} else {
    console.log(`${myvar} is invalid`)
}
myvar = 0
if (myvar) {
    console.log(`${myvar} is valid`)
} else {
    console.log(`${myvar} is invalid`)
}

myvar = ""
if (myvar) {
    console.log(`${myvar} is valid`)
} else {
    console.log(`${myvar} is invalid`)
}

myvar = 10 * undefined
if (myvar) {
    console.log(`${myvar} is valid`)
} else {
    console.log(`${myvar} is invalid`)
}


myvar = null
if (myvar) {
    console.log(`${myvar} is valid`)
} else {
    console.log(`${myvar} is invalid`)
}

myvar = false
if (myvar) {
    console.log(`${myvar} is valid`)
} else {
    console.log(`${myvar} is invalid`)
}

//
let mynewVar = "subramanian"
if (mynewVar) {
    console.log(`${mynewVar} is valid`)
} else {
    console.log(`${mynewVar} is invalid`)
}
mynewVar = 12
if (mynewVar) {
    console.log(`${mynewVar} is valid`)
} else {
    console.log(`${mynewVar} is invalid`)
}
.....................................................................................
....................................................................................
				Advanced Booleans
.....................................................................................

In javascript every thing is true,except the following values

Falsy Values:
.............
1.boolean false
2.0
3.undefined
4.NaN
5.empty string("",'')
6.null

Truthy values are except the above values are considered truthy values....
let myvar //undefined

if (myvar) {
    console.log(`${myvar} is valid`)
} else {
    console.log(`${myvar} is invalid`)
}
myvar = 0
if (myvar) {
    console.log(`${myvar} is valid`)
} else {
    console.log(`${myvar} is invalid`)
}

myvar = ""
if (myvar) {
    console.log(`${myvar} is valid`)
} else {
    console.log(`${myvar} is invalid`)
}

myvar = 10 * undefined
if (myvar) {
    console.log(`${myvar} is valid`)
} else {
    console.log(`${myvar} is invalid`)
}


myvar = null
if (myvar) {
    console.log(`${myvar} is valid`)
} else {
    console.log(`${myvar} is invalid`)
}

myvar = false
if (myvar) {
    console.log(`${myvar} is valid`)
} else {
    console.log(`${myvar} is invalid`)
}

//
let mynewVar = "subramanian"
if (mynewVar) {
    console.log(`${mynewVar} is valid`)
} else {
    console.log(`${mynewVar} is invalid`)
}
mynewVar = 12
if (mynewVar) {
    console.log(`${mynewVar} is valid`)
} else {
    console.log(`${mynewVar} is invalid`)
}
.....................................................................................
Operators:

==  - only value match
=== : Strict match -  type + value

//== and ===

let a = 10
let b = "10"

if (a == b) {
    console.log("a and b are equal")
} else {
    console.log("a and b are not equal")
}

//test both value and type -  both must match- if it is true, then only it is true
if (a === b) {
    console.log("a and b are equal")
} else {
    console.log("a and b are not equal")
}
.....................................................................................
tenary:
......
 To replace if else
 based on truthy and falsy values...

//tenary operator

let a = 10
let b = 20
if (a === b) {
    console.log("a and b are equal")
} else {
    console.log("a and b are not equal")
}
//using tenary
(a === b) ? console.log("a and b are equal") : console.log("a and b are not equal")

let c = (a === b) ? "a and b are equal" : "a and b are not equal"
console.log(c)
...................................................................................
...................................................................................